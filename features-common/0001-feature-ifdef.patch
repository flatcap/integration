From 788cd0e6d8316a9a03f6fa809873757bbcca5888 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Tue, 24 May 2016 16:50:02 +0100
Subject: [PATCH 1/7] feature: ifdef

---
 .travis.yml         |  30 ++++
 Makefile.am         |   4 +-
 PATCHES             |   1 +
 README.ifdef        |  57 ++++++
 doc/manual.xml.head | 183 +++++++++++++++++++
 doc/muttrc.ifdef    |  32 ++++
 doc/vimrc.ifdef     |   7 +
 hook.c              |   2 +-
 init.c              | 138 +++++++++++++--
 init.h              |   5 +
 main.c              | 404 +-----------------------------------------
 version.c           | 492 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 version.h           |  26 +++
 13 files changed, 964 insertions(+), 417 deletions(-)
 create mode 100644 .travis.yml
 create mode 100644 README.ifdef
 create mode 100644 doc/muttrc.ifdef
 create mode 100644 doc/vimrc.ifdef
 create mode 100644 version.c
 create mode 100644 version.h

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..e61a1e8
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,30 @@
+notifications:
+  email:
+    recipients:
+      - rich@flatcap.org
+    on_success: change
+    on_failure: always
+
+sudo: required
+dist: trusty
+
+language: c
+compiler: gcc
+cache: ccache
+
+env:
+    # Default config
+  - OPTS=""
+
+before_script:
+  - ccache -z
+  - autoreconf -i
+
+script:
+  - ./configure $OPTS
+  - make
+  - ./mutt -v
+
+after_script:
+  - ccache -s
+
diff --git a/Makefile.am b/Makefile.am
index 9ee3fae..6b68e25 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -34,7 +34,7 @@ mutt_SOURCES = \
 	score.c send.c sendlib.c signal.c sort.c \
 	status.c system.c thread.c charset.c history.c lib.c \
 	muttlib.c editmsg.c mbyte.c \
-	url.c ascii.c crypt-mod.c crypt-mod.h safe_asprintf.c
+	url.c ascii.c crypt-mod.c crypt-mod.h safe_asprintf.c version.c
 
 nodist_mutt_SOURCES = $(BUILT_SOURCES)
 
@@ -73,7 +73,7 @@ EXTRA_DIST = COPYRIGHT GPL OPS OPS.PGP OPS.CRYPT OPS.SMIME TODO UPDATING \
 	muttbug pgppacket.h depcomp ascii.h BEWARE PATCHES patchlist.sh \
 	ChangeLog mkchangelog.sh mutt_idna.h \
 	snprintf.c regex.c crypt-gpgme.h hcachever.sh.in sys_socket.h \
-	txt2c.c txt2c.sh version.sh check_sec.sh
+	txt2c.c txt2c.sh version.sh check_sec.sh version.h
 
 EXTRA_SCRIPTS = smime_keys
 
diff --git a/PATCHES b/PATCHES
index e69de29..558c519 100644
--- a/PATCHES
+++ b/PATCHES
@@ -0,0 +1 @@
+patch-ifdef-neo-UNKNOWN
diff --git a/README.ifdef b/README.ifdef
new file mode 100644
index 0000000..4b54d11
--- /dev/null
+++ b/README.ifdef
@@ -0,0 +1,57 @@
+Ifdef Patch
+===========
+
+    Conditional config options
+
+Patch
+-----
+
+    To check if Mutt supports "ifdef", look for "patch-ifdef" in the mutt
+    version.
+
+    Dependencies
+    * mutt-1.6.1
+
+Introduction
+------------
+
+    The "ifdef" patch introduces three new commands to Mutt and allow you to
+    share one config file between versions of Mutt that may have different
+    features compiled in.
+
+        ifdef  symbol config-command [args...]  # If a symbol is defined
+        ifndef symbol config-command [args...]  # If a symbol is not defined
+        finish                                  # Finish reading the current file
+
+    Here a symbol can be a $variable, <function>, command or compile-time
+    symbol, such as "USE_IMAP".
+
+    'finish' is particularly useful when combined with 'ifndef'. e.g.
+
+        # Sidebar config file
+        ifndef USE_SIDEBAR finish
+
+Commands
+--------
+
+        ifdef  symbol "config-command [args]"
+        ifndef symbol "config-command [args]"
+        finish
+
+See Also
+--------
+
+    * NeoMutt project
+
+Known Bugs
+----------
+
+    None
+
+Credits
+-------
+
+    * Cedric Duval <cedricduval@free.fr>
+    * Matteo F. Vescovi <mfvescovi@gmail.com>
+    * Richard Russon <rich@flatcap.org>
+
diff --git a/doc/manual.xml.head b/doc/manual.xml.head
index b90908f..4352ef9 100644
--- a/doc/manual.xml.head
+++ b/doc/manual.xml.head
@@ -7467,6 +7467,16 @@ <sect2 id="compile-time-features">
 
 </sect2>
 
+<sect2 id="mutt-patches">
+<title>Mutt Patches</title>
+<para>
+Mutt may also be <quote>patched</quote> to support smaller features.
+These patches should add a free-form string to the end Mutt's version string.
+Running <literal>mutt -v</literal> might show:
+<screen>patch-1.6.1.sidebar.20160502</screen>
+</para>
+</sect2>
+
 <sect2 id="url-syntax">
 <title>URL Syntax</title>
 
@@ -8081,6 +8091,167 @@ <sect1 id="sending-mixmaster">
 
 </sect1>
 
+<sect1 id="ifdef">
+	<title>Ifdef Patch</title>
+	<subtitle>Conditional config options</subtitle>
+
+	<sect2 id="ifdef-patch">
+		<title>Patch</title>
+
+		<para>
+			To check if Mutt supports <quote>ifdef</quote>, look for
+			<quote>patch-ifdef</quote> in the mutt version.
+			See: <xref linkend="mutt-patches"/>.
+		</para>
+
+		<itemizedlist>
+			<title>Dependencies:</title>
+			<listitem><para>mutt-1.6.1</para></listitem>
+		</itemizedlist>
+
+		<para>This patch is part of the <ulink url="http://www.neomutt.org/">NeoMutt Project</ulink>.</para>
+	</sect2>
+
+	<sect2 id="ifdef-intro">
+		<title>Introduction</title>
+
+		<para>
+			The <quote>ifdef</quote> patch introduces three new commands to
+			Mutt and allow you to share one config file between versions of Mutt
+			that may have different features compiled in.
+		</para>
+
+<screen>
+ifdef  symbol config-command [args...]  <emphasis role="comment"># If a symbol is defined</emphasis>
+ifndef symbol config-command [args...]  <emphasis role="comment"># If a symbol is not defined</emphasis>
+finish                                  <emphasis role="comment"># Finish reading the current file</emphasis>
+</screen>
+
+		<para>
+			Here a symbol can be a <link linkend="variables">$variable</link>,
+			<link linkend="functions">&lt;function&gt;</link>,
+			<link linkend="commands">command</link> or compile-time symbol, such
+			as <quote>USE_IMAP</quote>.
+		</para>
+
+        <para>
+            <literal>finish</literal> is particularly useful when combined with
+            <literal>ifndef</literal>. e.g.
+        </para>
+
+<screen>
+<emphasis role="comment"># Sidebar config file</emphasis>
+ifndef USE_SIDEBAR finish
+</screen>
+
+	</sect2>
+
+<!--
+	<sect2 id="ifdef-variables">
+		<title>Variables</title>
+		<para>None</para>
+	</sect2>
+
+	<sect2 id="ifdef-functions">
+		<title>Functions</title>
+		<para>None</para>
+	</sect2>
+-->
+
+	<sect2 id="ifdef-commands">
+		<title>Commands</title>
+		<cmdsynopsis>
+			<command>ifdef</command>
+			<arg choice="plain">
+				<replaceable class="parameter">symbol</replaceable>
+			</arg>
+			<arg choice="plain">
+				<replaceable class="parameter">"config-command [args]"</replaceable>
+			</arg>
+			<command>ifndef</command>
+			<arg choice="plain">
+				<replaceable class="parameter">symbol</replaceable>
+			</arg>
+			<arg choice="plain">
+				<replaceable class="parameter">"config-command [args]"</replaceable>
+			</arg>
+			<command>finish</command>
+		</cmdsynopsis>
+	</sect2>
+
+<!--
+	<sect2 id="ifdef-colors">
+		<title>Colors</title>
+		<para>None</para>
+	</sect2>
+
+	<sect2 id="ifdef-sort">
+		<title>Sort</title>
+		<para>None</para>
+	</sect2>
+-->
+
+	<sect2 id="ifdef-muttrc">
+		<title>Muttrc</title>
+<screen>
+<emphasis role="comment"># Example Mutt config file for the 'ifdef' feature.
+ 
+# This feature introduces three useful commands which allow you to share
+# one config file between versions of Mutt that may have different
+# features compiled in.
+ 
+#	ifdef  symbol config-command [args...]
+#	ifndef symbol config-command [args...]
+#	finish                                
+ 
+# The 'ifdef' command tests whether Mutt understands the name of
+# a variable, function, command or compile-time symbol.
+# If it does, then it executes a config command.
+ 
+# The 'ifndef' command tests whether a symbol does NOT exist.
+ 
+# The 'finish' command tells Mutt to stop reading current config file.
+ 
+# If the 'trash' variable exists, set it.</emphasis>
+ifdef trash 'set trash=~/Mail/trash'
+ 
+<emphasis role="comment"># If the 'tag-pattern' function exists, bind a key to it.</emphasis>
+ifdef tag-pattern 'bind index &lt;F6&gt; tag-pattern'
+ 
+<emphasis role="comment"># If the 'imap-fetch-mail' command exists, read my IMAP config.</emphasis>
+ifdef imap-fetch-mail 'source ~/.mutt/imap.rc'
+ 
+<emphasis role="comment"># If the compile-time symbol 'USE_SIDEBAR' does not exist, then
+# stop reading the current config file.</emphasis>
+ifndef USE_SIDEBAR finish
+ 
+<emphasis role="comment"># vim: syntax=muttrc</emphasis>
+</screen>
+	</sect2>
+
+	<sect2 id="ifdef-see-also">
+		<title>See Also</title>
+
+		<itemizedlist>
+			<listitem><para><ulink url="http://www.neomutt.org/">NeoMutt Project</ulink></para></listitem>
+		</itemizedlist>
+	</sect2>
+
+	<sect2 id="ifdef-known-bugs">
+		<title>Known Bugs</title>
+		<para>None</para>
+	</sect2>
+
+	<sect2 id="ifdef-credits">
+		<title>Credits</title>
+		<itemizedlist>
+		<listitem><para>Cedric Duval <email>cedricduval@free.fr</email></para></listitem>
+		<listitem><para>Matteo F. Vescovi <email>mfvescovi@gmail.com</email></para></listitem>
+		<listitem><para>Richard Russon <email>rich@flatcap.org</email></para></listitem>
+		</itemizedlist>
+	</sect2>
+</sect1>
+
 </chapter>
 
 <chapter id="security">
@@ -8874,6 +9045,18 @@ <sect1 id="commands">
 
 <listitem>
 <cmdsynopsis>
+<command>ifdef</command>
+<arg choice="plain">
+<replaceable class="parameter">item</replaceable>
+</arg>
+<arg choice="plain">
+<replaceable class="parameter">"config-command [args]"</replaceable>
+</arg>
+</cmdsynopsis>
+</listitem>
+
+<listitem>
+<cmdsynopsis>
 <command><link linkend="ignore">ignore</link></command>
 <arg choice="plain">
 <replaceable class="parameter">pattern</replaceable>
diff --git a/doc/muttrc.ifdef b/doc/muttrc.ifdef
new file mode 100644
index 0000000..f618d5d
--- /dev/null
+++ b/doc/muttrc.ifdef
@@ -0,0 +1,32 @@
+# Example Mutt config file for the 'ifdef' feature.
+
+# This feature introduces three useful commands which allow you to share
+# one config file between versions of Mutt that may have different
+# features compiled in.
+
+#	ifdef  symbol config-command [args...]
+#	ifndef symbol config-command [args...]
+#	finish                                
+
+# The 'ifdef' command tests whether Mutt understands the name of
+# a variable, function, command or compile-time symbol.
+# If it does, then it executes a config command.
+
+# The 'ifndef' command tests whether a symbol does NOT exist.
+
+# The 'finish' command tells Mutt to stop reading current config file.
+
+# If the 'trash' variable exists, set it.
+ifdef trash 'set trash=~/Mail/trash'
+
+# If the 'tag-pattern' function exists, bind a key to it.
+ifdef tag-pattern 'bind index <F6> tag-pattern'
+
+# If the 'imap-fetch-mail' command exists, read my IMAP config.
+ifdef imap-fetch-mail 'source ~/.mutt/imap.rc'
+
+# If the compile-time symbol 'USE_SIDEBAR' does not exist, then
+# stop reading the current config file.
+ifndef USE_SIDEBAR finish
+
+# vim: syntax=muttrc
diff --git a/doc/vimrc.ifdef b/doc/vimrc.ifdef
new file mode 100644
index 0000000..342c75e
--- /dev/null
+++ b/doc/vimrc.ifdef
@@ -0,0 +1,7 @@
+" Vim syntax file for the mutt ifdef patch
+
+syntax keyword muttrcCommand    ifdef
+syntax keyword muttrcCommand    ifndef
+syntax keyword muttrcCommand    finish
+
+" vim: syntax=vim
diff --git a/hook.c b/hook.c
index a89b615..3a0756e 100644
--- a/hook.c
+++ b/hook.c
@@ -362,7 +362,7 @@ void mutt_message_hook (CONTEXT *ctx, HEADER *hdr, int type)
 
     if (hook->type & type)
       if ((mutt_pattern_exec (hook->pattern, 0, ctx, hdr) > 0) ^ hook->rx.not)
-	if (mutt_parse_rc_line (hook->command, &token, &err) != 0)
+	if (mutt_parse_rc_line (hook->command, &token, &err) == -1)
 	{
 	  FREE (&token.data);
 	  mutt_error ("%s", err.data);
diff --git a/init.c b/init.c
index 69e2f76..c10f448 100644
--- a/init.c
+++ b/init.c
@@ -32,6 +32,7 @@
 #include "mutt_crypt.h"
 #include "mutt_idna.h"
 #include "group.h"
+#include "version.h"
 
 #if defined(USE_SSL)
 #include "mutt_ssl.h"
@@ -601,6 +602,113 @@ static void remove_from_list (LIST **l, const char *str)
   }
 }
 
+/**
+ * finish_source - 'finish' command: stop processing current config file
+ * @tmp:  Temporary space shared by all command handlers
+ * @s:    Current line of the config file
+ * @data: data field from init.h:struct command_t
+ * @err:  Buffer for any error message
+ *
+ * If the 'finish' command is found, we should stop reading the current file.
+ *
+ * Returns:
+ *	 1 Stop processing the current file
+ *	-1 Failed
+ */
+static int finish_source (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
+{
+	if (MoreArgs (s)) {
+		snprintf (err->data, err->dsize, _("finish: too many arguments"));
+		return -1;
+	}
+
+	return 1;
+}
+
+/**
+ * parse_ifdef - 'ifdef' command: conditional config
+ * @tmp:  Temporary space shared by all command handlers
+ * @s:    Current line of the config file
+ * @data: data field from init.h:struct command_t
+ * @err:  Buffer for any error message
+ *
+ * The 'ifdef' command allows conditional elements in the config file.
+ * If a given variable, function, command or compile-time symbol exists, then
+ * read the rest of the line of config commands.
+ * e.g.
+ *	ifdef USE_SIDEBAR source ~/.mutt/sidebar.rc
+ *
+ * If (data == 1) then it means use the 'ifndef' (if-not-defined) command.
+ * e.g.
+ *	ifndef USE_IMAP finish
+ *
+ * Returns:
+ *	 0 Success
+ *	-1 Failed
+ */
+static int parse_ifdef (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
+{
+	int i, j, res = 0;
+	BUFFER token;
+
+	memset (&token, 0, sizeof (token));
+	mutt_extract_token (tmp, s, 0);
+
+	/* is the item defined as a variable? */
+	res = (mutt_option_index (tmp->data) != -1);
+
+	/* is the item a compiled-in feature? */
+	if (!res) {
+		res = feature_enabled (tmp->data);
+	}
+
+	/* or a function? */
+	if (!res) {
+		for (i = 0; !res && (i < MENU_MAX); i++) {
+			const struct binding_t *b = km_get_table (Menus[i].value);
+			if (!b)
+				continue;
+
+			for (j = 0; b[j].name; j++) {
+				if (mutt_strcmp (tmp->data, b[j].name) == 0) {
+					res = 1;
+					break;
+				}
+			}
+		}
+	}
+
+	/* or a command? */
+	if (!res) {
+		for (i = 0; Commands[i].name; i++) {
+			if (mutt_strcmp (tmp->data, Commands[i].name) == 0) {
+				res = 1;
+				break;
+			}
+		}
+	}
+
+	if (!MoreArgs (s)) {
+		snprintf (err->data, err->dsize, _("%s: too few arguments"),
+			(data ? "ifndef" : "ifdef"));
+		return -1;
+	}
+	mutt_extract_token (tmp, s, M_TOKEN_SPACE);
+
+        /* ifdef KNOWN_SYMBOL or ifndef UNKNOWN_SYMBOL */
+	if ((res && (data == 0)) || (!res && (data == 1))) {
+                int rc = mutt_parse_rc_line (tmp->data, &token, err);
+		if (rc == -1) {
+			mutt_error ("Error: %s", err->data);
+			FREE(&token.data);
+			return -1;
+		}
+		FREE(&token.data);
+                return rc;
+	}
+	return 0;
+}
+
 static int parse_unignore (BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
 {
   do
@@ -2238,7 +2346,7 @@ static int parse_set (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
 static int source_rc (const char *rcfile, BUFFER *err)
 {
   FILE *f;
-  int line = 0, rc = 0, conv = 0;
+  int line = 0, rc = 0, conv = 0, line_rc;
   BUFFER token;
   char *linebuf = NULL;
   char *currentline = NULL;
@@ -2267,17 +2375,17 @@ static int source_rc (const char *rcfile, BUFFER *err)
     else 
       currentline=linebuf;
 
-    if (mutt_parse_rc_line (currentline, &token, err) == -1)
-    {
+    line_rc = mutt_parse_rc_line (currentline, &token, err);
+    if (line_rc == -1) {
       mutt_error (_("Error in %s, line %d: %s"), rcfile, line, err->data);
       if (--rc < -MAXERRS) 
       {
         if (conv) FREE(&currentline);
         break;
       }
-    }
-    else
-    {
+    } else if (line_rc == 1) {
+      break;	/* Found "finish" command */
+    } else {
       if (rc < 0)
         rc = -1;
     }
@@ -2332,7 +2440,7 @@ static int parse_source (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err
    err		where to write error messages */
 int mutt_parse_rc_line (/* const */ char *line, BUFFER *token, BUFFER *err)
 {
-  int i, r = -1;
+  int i, r = 0;
   BUFFER expn;
 
   if (!line || !*line)
@@ -2359,22 +2467,24 @@ int mutt_parse_rc_line (/* const */ char *line, BUFFER *token, BUFFER *err)
     {
       if (!mutt_strcmp (token->data, Commands[i].name))
       {
-	if (Commands[i].func (token, &expn, Commands[i].data, err) != 0)
-	  goto finish;
-        break;
+        r = Commands[i].func (token, &expn, Commands[i].data, err);
+        if (r != 0) {   /* -1 Error, +1 Finish */
+          goto finish;  /* Propagate return code */
+        }
+        break;          /* Continue with next command */
       }
     }
     if (!Commands[i].name)
     {
       snprintf (err->data, err->dsize, _("%s: unknown command"), NONULL (token->data));
-      goto finish;
+      r = -1;
+      break;            /* Ignore the rest of the line */
     }
   }
-  r = 0;
 finish:
   if (expn.destroy)
     FREE (&expn.data);
-  return (r);
+  return r;
 }
 
 
@@ -2852,7 +2962,7 @@ static int mutt_execute_commands (LIST *p)
   mutt_buffer_init (&token);
   for (; p; p = p->next)
   {
-    if (mutt_parse_rc_line (p->data, &token, &err) != 0)
+    if (mutt_parse_rc_line (p->data, &token, &err) == -1)
     {
       fprintf (stderr, _("Error in command line: %s\n"), err.data);
       FREE (&token.data);
diff --git a/init.h b/init.h
index 5a12ec0..8e87aa0 100644
--- a/init.h
+++ b/init.h
@@ -3665,6 +3665,8 @@ static int parse_lists (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unlists (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_alias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unalias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
+static int finish_source (BUFFER *, BUFFER *, unsigned long, BUFFER *);
+static int parse_ifdef (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_ignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_source (BUFFER *, BUFFER *, unsigned long, BUFFER *);
@@ -3715,6 +3717,9 @@ const struct command_t Commands[] = {
   { "group",		parse_group,		M_GROUP },
   { "ungroup",		parse_group,		M_UNGROUP },
   { "hdr_order",	parse_list,		UL &HeaderOrderList },
+  { "ifdef",		parse_ifdef,		0 },
+  { "ifndef",		parse_ifdef,		1 },
+  { "finish",		finish_source,		0 },
 #ifdef HAVE_ICONV
   { "iconv-hook",	mutt_parse_hook,	M_ICONVHOOK },
 #endif
diff --git a/main.c b/main.c
index d0a1128..e348ca1 100644
--- a/main.c
+++ b/main.c
@@ -31,6 +31,7 @@
 #include "url.h"
 #include "mutt_crypt.h"
 #include "mutt_idna.h"
+#include "version.h"
 
 #ifdef USE_SASL
 #include "mutt_sasl.h"
@@ -62,46 +63,6 @@
 #include <idn/stringprep.h>
 #endif
 
-static const char *ReachingUs = N_("\
-To contact the developers, please mail to <mutt-dev@mutt.org>.\n\
-To report a bug, please visit http://bugs.mutt.org/.\n");
-
-static const char *Notice = N_("\
-Copyright (C) 1996-2016 Michael R. Elkins and others.\n\
-Mutt comes with ABSOLUTELY NO WARRANTY; for details type `mutt -vv'.\n\
-Mutt is free software, and you are welcome to redistribute it\n\
-under certain conditions; type `mutt -vv' for details.\n");
-
-static const char *Copyright = N_("\
-Copyright (C) 1996-2014 Michael R. Elkins <me@mutt.org>\n\
-Copyright (C) 1996-2002 Brandon Long <blong@fiction.net>\n\
-Copyright (C) 1997-2009 Thomas Roessler <roessler@does-not-exist.org>\n\
-Copyright (C) 1998-2005 Werner Koch <wk@isil.d.shuttle.de>\n\
-Copyright (C) 1999-2014 Brendan Cully <brendan@kublai.com>\n\
-Copyright (C) 1999-2002 Tommi Komulainen <Tommi.Komulainen@iki.fi>\n\
-Copyright (C) 2000-2004 Edmund Grimley Evans <edmundo@rano.org>\n\
-Copyright (C) 2006-2009 Rocco Rutte <pdmef@gmx.net>\n\
-Copyright (C) 2014-2015 Kevin J. McCarthy <kevin@8t8.us>\n\
-\n\
-Many others not mentioned here contributed code, fixes,\n\
-and suggestions.\n");
-
-static const char *Licence = N_("\
-    This program is free software; you can redistribute it and/or modify\n\
-    it under the terms of the GNU General Public License as published by\n\
-    the Free Software Foundation; either version 2 of the License, or\n\
-    (at your option) any later version.\n\
-\n\
-    This program is distributed in the hope that it will be useful,\n\
-    but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
-    GNU General Public License for more details.\n");
-static const char *Obtaining = N_("\
-    You should have received a copy of the GNU General Public License\n\
-    along with this program; if not, write to the Free Software\n\
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\
-");
-
 void mutt_exit (int code)
 {
   mutt_endwin (NULL);
@@ -158,359 +119,6 @@ options:\n\
   exit (0);
 }
 
-extern const char cc_version[];
-extern const char cc_cflags[];
-extern const char configure_options[];
-
-static char *
-rstrip_in_place(char *s)
-{
-  char *p;
-
-  p = &s[strlen(s)];
-  if (p == s)
-    return s;
-  p--;
-  while (p >= s && (*p == '\n' || *p == '\r'))
-    *p-- = '\0';
-  return s;
-}
-
-static void show_version (void)
-{
-  struct utsname uts;
-
-  puts (mutt_make_version());
-  puts (_(Notice));
-
-  uname (&uts);
-
-#ifdef _AIX
-  printf ("System: %s %s.%s", uts.sysname, uts.version, uts.release);
-#elif defined (SCO)
-  printf ("System: SCO %s", uts.release);
-#else
-  printf ("System: %s %s", uts.sysname, uts.release);
-#endif
-
-  printf (" (%s)", uts.machine);
-
-#ifdef NCURSES_VERSION
-  printf ("\nncurses: %s (compiled with %s)", curses_version(), NCURSES_VERSION);
-#elif defined(USE_SLANG_CURSES)
-  printf ("\nslang: %d", SLANG_VERSION);
-#endif
-
-#ifdef _LIBICONV_VERSION
-  printf ("\nlibiconv: %d.%d", _LIBICONV_VERSION >> 8,
-	  _LIBICONV_VERSION & 0xff);
-#endif
-
-#ifdef HAVE_LIBIDN
-  printf ("\nlibidn: %s (compiled with %s)", stringprep_check_version (NULL), 
-	  STRINGPREP_VERSION);
-#endif
-
-#ifdef USE_HCACHE
-  printf ("\nhcache backend: %s", mutt_hcache_backend ());
-#endif
-
-  puts ("\n\nCompiler:");
-  rstrip_in_place((char *)cc_version);
-  puts (cc_version);
-
-  rstrip_in_place((char *)configure_options);
-  printf ("\nConfigure options: %s\n", configure_options);
-
-  rstrip_in_place((char *)cc_cflags);
-  printf ("\nCompilation CFLAGS: %s\n", cc_cflags);
-
-  puts (_("\nCompile options:"));
-
-#ifdef DOMAIN
-  printf ("DOMAIN=\"%s\"\n", DOMAIN);
-#else
-  puts ("-DOMAIN");
-#endif
-
-#ifdef DEBUG
-  puts ("+DEBUG");
-#else
-  puts ("-DEBUG");
-#endif
-  
-
-  
-  puts (
-
-#ifdef HOMESPOOL
-	"+HOMESPOOL  "
-#else
-	"-HOMESPOOL  "
-#endif
-
-#ifdef USE_SETGID
-	"+USE_SETGID  "
-#else
-	"-USE_SETGID  "
-#endif
-
-#ifdef USE_DOTLOCK
-	"+USE_DOTLOCK  "
-#else
-	"-USE_DOTLOCK  "
-#endif
-
-#ifdef DL_STANDALONE
-	"+DL_STANDALONE  "
-#else
-	"-DL_STANDALONE  "
-#endif
-
-#ifdef USE_FCNTL
-	"+USE_FCNTL  "
-#else
-	"-USE_FCNTL  "
-#endif
-
-#ifdef USE_FLOCK
-	"+USE_FLOCK   "
-#else
-	"-USE_FLOCK   "
-#endif
-    );
-  puts (
-#ifdef USE_POP
-	"+USE_POP  "
-#else
-	"-USE_POP  "
-#endif
-
-#ifdef USE_IMAP
-        "+USE_IMAP  "
-#else
-        "-USE_IMAP  "
-#endif
-
-#ifdef USE_SMTP
-	"+USE_SMTP  "
-#else
-	"-USE_SMTP  "
-#endif
-	"\n"
-	
-#ifdef USE_SSL_OPENSSL
-	"+USE_SSL_OPENSSL  "
-#else
-	"-USE_SSL_OPENSSL  "
-#endif
-
-#ifdef USE_SSL_GNUTLS
-	"+USE_SSL_GNUTLS  "
-#else
-	"-USE_SSL_GNUTLS  "
-#endif
-
-#ifdef USE_SASL
-	"+USE_SASL  "
-#else
-	"-USE_SASL  "
-#endif
-#ifdef USE_GSS
-	"+USE_GSS  "
-#else
-	"-USE_GSS  "
-#endif
-
-#if HAVE_GETADDRINFO
-	"+HAVE_GETADDRINFO  "
-#else
-	"-HAVE_GETADDRINFO  "
-#endif
-        );
-  	
-  puts (
-#ifdef HAVE_REGCOMP
-	"+HAVE_REGCOMP  "
-#else
-	"-HAVE_REGCOMP  "
-#endif
-
-#ifdef USE_GNU_REGEX
-	"+USE_GNU_REGEX  "
-#else
-	"-USE_GNU_REGEX  "
-#endif
-
-	"\n"
-	
-#ifdef HAVE_COLOR
-	"+HAVE_COLOR  "
-#else
-	"-HAVE_COLOR  "
-#endif
-	
-#ifdef HAVE_START_COLOR
-	"+HAVE_START_COLOR  "
-#else
-	"-HAVE_START_COLOR  "
-#endif
-	
-#ifdef HAVE_TYPEAHEAD
-	"+HAVE_TYPEAHEAD  "
-#else
-	"-HAVE_TYPEAHEAD  "
-#endif
-	
-#ifdef HAVE_BKGDSET
-	"+HAVE_BKGDSET  "
-#else
-	"-HAVE_BKGDSET  "
-#endif
-
-	"\n"
-	
-#ifdef HAVE_CURS_SET
-	"+HAVE_CURS_SET  "
-#else
-	"-HAVE_CURS_SET  "
-#endif
-	
-#ifdef HAVE_META
-	"+HAVE_META  "
-#else
-	"-HAVE_META  "
-#endif
-	
-#ifdef HAVE_RESIZETERM
-	"+HAVE_RESIZETERM  "
-#else
-	"-HAVE_RESIZETERM  "
-#endif
-        );	
-  
-  puts (
-#ifdef CRYPT_BACKEND_CLASSIC_PGP
-        "+CRYPT_BACKEND_CLASSIC_PGP  "
-#else
-        "-CRYPT_BACKEND_CLASSIC_PGP  "
-#endif
-#ifdef CRYPT_BACKEND_CLASSIC_SMIME
-        "+CRYPT_BACKEND_CLASSIC_SMIME  "
-#else
-        "-CRYPT_BACKEND_CLASSIC_SMIME  "
-#endif
-#ifdef CRYPT_BACKEND_GPGME
-        "+CRYPT_BACKEND_GPGME  "
-#else
-        "-CRYPT_BACKEND_GPGME  "
-#endif
-        );
-  
-  puts (
-#ifdef EXACT_ADDRESS
-	"+EXACT_ADDRESS  "
-#else
-	"-EXACT_ADDRESS  "
-#endif
-
-#ifdef SUN_ATTACHMENT
-	"+SUN_ATTACHMENT  "
-#else
-	"-SUN_ATTACHMENT  "
-#endif
-
-	"\n"
-	
-#ifdef ENABLE_NLS
-	"+ENABLE_NLS  "
-#else
-	"-ENABLE_NLS  "
-#endif
-
-#ifdef LOCALES_HACK
-	"+LOCALES_HACK  "
-#else
-	"-LOCALES_HACK  "
-#endif
-	      
-#ifdef HAVE_WC_FUNCS
-	"+HAVE_WC_FUNCS  "
-#else
-	"-HAVE_WC_FUNCS  "
-#endif
-	
-#ifdef HAVE_LANGINFO_CODESET
-	"+HAVE_LANGINFO_CODESET  "
-#else
-	"-HAVE_LANGINFO_CODESET  "
-#endif
-
-	
-#ifdef HAVE_LANGINFO_YESEXPR
- 	"+HAVE_LANGINFO_YESEXPR  "
-#else
- 	"-HAVE_LANGINFO_YESEXPR  "
-#endif
-	
-	"\n"
-
-#if HAVE_ICONV
-	"+HAVE_ICONV  "
-#else
-	"-HAVE_ICONV  "
-#endif
-
-#if ICONV_NONTRANS
-	"+ICONV_NONTRANS  "
-#else
-	"-ICONV_NONTRANS  "
-#endif
-
-#if HAVE_LIBIDN
-	"+HAVE_LIBIDN  "
-#else
-	"-HAVE_LIBIDN  "
-#endif
-	
-#if HAVE_GETSID
-	"+HAVE_GETSID  "
-#else
-	"-HAVE_GETSID  "
-#endif
-
-#if USE_HCACHE
-	"+USE_HCACHE  "
-#else
-	"-USE_HCACHE  "
-#endif
-
-	);
-
-#ifdef ISPELL
-  printf ("ISPELL=\"%s\"\n", ISPELL);
-#else
-  puts ("-ISPELL");
-#endif
-
-  printf ("SENDMAIL=\"%s\"\n", SENDMAIL);
-  printf ("MAILPATH=\"%s\"\n", MAILPATH);
-  printf ("PKGDATADIR=\"%s\"\n", PKGDATADIR);
-  printf ("SYSCONFDIR=\"%s\"\n", SYSCONFDIR);
-  printf ("EXECSHELL=\"%s\"\n", EXECSHELL);
-#ifdef MIXMASTER
-  printf ("MIXMASTER=\"%s\"\n", MIXMASTER);
-#else
-  puts ("-MIXMASTER");
-#endif
-
-  puts(_(ReachingUs));
-
-  mutt_print_patchlist();
-  
-  exit (0);
-}
-
 static void start_curses (void)
 {
   km_init (); /* must come before mutt_init */
@@ -752,14 +360,10 @@ int main (int argc, char **argv)
     case 0:
       break;
     case 1:
-      show_version ();
-      break;
+      print_version();
+      exit (0);
     default:
-      puts (mutt_make_version ());
-      puts (_(Copyright));
-      puts (_(Licence));
-      puts (_(Obtaining));
-      puts (_(ReachingUs));
+      print_copyright();
       exit (0);
   }
 
diff --git a/version.c b/version.c
new file mode 100644
index 0000000..f1b6b59
--- /dev/null
+++ b/version.c
@@ -0,0 +1,492 @@
+/**
+ * Copyright (C) 1996-2007 Michael R. Elkins <me@mutt.org>
+ * Copyright (C) 1999-2007 Thomas Roessler <roessler@does-not-exist.org>
+ * Copyright (C) 2016 Richard Russon
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#if HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/utsname.h>
+
+#ifdef HAVE_STRINGPREP_H
+#include <stringprep.h>
+#elif defined (HAVE_IDN_STRINGPREP_H)
+#include <idn/stringprep.h>
+#endif
+#ifdef USE_SLANG_CURSES
+#include "slang.h"
+#endif
+
+#include "lib.h"
+
+// #include "protos.h"
+const char * mutt_make_version (void);
+void mutt_print_patchlist (void);
+
+// #include "hcache.h"
+const char * mutt_hcache_backend (void);
+
+const int SCREEN_WIDTH = 80;
+
+extern const char cc_version[];
+extern const char cc_cflags[];
+extern const char configure_options[];
+
+static const char *Copyright = N_(
+	"Copyright (C) 1996-2014 Michael R. Elkins <me@mutt.org>\n"
+	"Copyright (C) 1996-2002 Brandon Long <blong@fiction.net>\n"
+	"Copyright (C) 1997-2009 Thomas Roessler <roessler@does-not-exist.org>\n"
+	"Copyright (C) 1998-2005 Werner Koch <wk@isil.d.shuttle.de>\n"
+	"Copyright (C) 1999-2014 Brendan Cully <brendan@kublai.com>\n"
+	"Copyright (C) 1999-2002 Tommi Komulainen <Tommi.Komulainen@iki.fi>\n"
+	"Copyright (C) 2000-2004 Edmund Grimley Evans <edmundo@rano.org>\n"
+	"Copyright (C) 2006-2009 Rocco Rutte <pdmef@gmx.net>\n"
+	"Copyright (C) 2014-2015 Kevin J. McCarthy <kevin@8t8.us>\n"
+	"\n"
+	"Many others not mentioned here contributed code, fixes,\n"
+	"and suggestions.\n"
+);
+
+static const char *License = N_(
+	"    This program is free software; you can redistribute it and/or modify\n"
+	"    it under the terms of the GNU General Public License as published by\n"
+	"    the Free Software Foundation; either version 2 of the License, or\n"
+	"    (at your option) any later version.\n"
+	"\n"
+	"    This program is distributed in the hope that it will be useful,\n"
+	"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
+	"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
+	"    GNU General Public License for more details.\n"
+);
+
+static const char *Obtaining = N_(
+	"    You should have received a copy of the GNU General Public License\n"
+	"    along with this program; if not, write to the Free Software\n"
+	"    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n"
+);
+
+static const char *ReachingUs = N_(
+	"To contact the developers, please mail to <mutt-dev@mutt.org>.\n"
+	"To report a bug, please visit http://bugs.mutt.org/.\n"
+);
+
+static const char *Notice = N_(
+	"Copyright (C) 1996-2016 Michael R. Elkins and others.\n"
+	"Mutt comes with ABSOLUTELY NO WARRANTY; for details type `mutt -vv'.\n"
+	"Mutt is free software, and you are welcome to redistribute it\n"
+	"under certain conditions; type `mutt -vv' for details.\n"
+);
+
+struct compile_options {
+	const char *name;
+	int enabled;
+};
+
+static struct compile_options comp_opts[] = {
+#ifdef CRYPT_BACKEND_CLASSIC_PGP
+	{ "CRYPT_BACKEND_CLASSIC_PGP", 1 },
+#else
+	{ "CRYPT_BACKEND_CLASSIC_PGP", 0 },
+#endif
+#ifdef CRYPT_BACKEND_CLASSIC_SMIME
+	{ "CRYPT_BACKEND_CLASSIC_SMIME", 1 },
+#else
+	{ "CRYPT_BACKEND_CLASSIC_SMIME", 0 },
+#endif
+#ifdef CRYPT_BACKEND_GPGME
+	{ "CRYPT_BACKEND_GPGME", 1 },
+#else
+	{ "CRYPT_BACKEND_GPGME", 0 },
+#endif
+#ifdef DEBUG
+	{ "DEBUG", 1 },
+#else
+	{ "DEBUG", 0 },
+#endif
+#ifdef DL_STANDALONE
+	{ "DL_STANDALONE", 1 },
+#else
+	{ "DL_STANDALONE", 0 },
+#endif
+#ifdef ENABLE_NLS
+	{ "ENABLE_NLS", 1 },
+#else
+	{ "ENABLE_NLS", 0 },
+#endif
+#ifdef EXACT_ADDRESS
+	{ "EXACT_ADDRESS", 1 },
+#else
+	{ "EXACT_ADDRESS", 0 },
+#endif
+#ifdef HOMESPOOL
+	{ "HOMESPOOL", 1 },
+#else
+	{ "HOMESPOOL", 0 },
+#endif
+#ifdef LOCALES_HACK
+	{ "LOCALES_HACK", 1 },
+#else
+	{ "LOCALES_HACK", 0 },
+#endif
+#ifdef SUN_ATTACHMENT
+	{ "SUN_ATTACHMENT", 1 },
+#else
+	{ "SUN_ATTACHMENT", 0 },
+#endif
+#ifdef HAVE_BKGDSET
+	{ "HAVE_BKGDSET", 1 },
+#else
+	{ "HAVE_BKGDSET", 0 },
+#endif
+#ifdef HAVE_COLOR
+	{ "HAVE_COLOR", 1 },
+#else
+	{ "HAVE_COLOR", 0 },
+#endif
+#ifdef HAVE_CURS_SET
+	{ "HAVE_CURS_SET", 1 },
+#else
+	{ "HAVE_CURS_SET", 0 },
+#endif
+#ifdef HAVE_GETADDRINFO
+	{ "HAVE_GETADDRINFO", 1 },
+#else
+	{ "HAVE_GETADDRINFO", 0 },
+#endif
+#ifdef HAVE_GETSID
+	{ "HAVE_GETSID", 1 },
+#else
+	{ "HAVE_GETSID", 0 },
+#endif
+#ifdef HAVE_ICONV
+	{ "HAVE_ICONV", 1 },
+#else
+	{ "HAVE_ICONV", 0 },
+#endif
+#ifdef HAVE_LANGINFO_CODESET
+	{ "HAVE_LANGINFO_CODESET", 1 },
+#else
+	{ "HAVE_LANGINFO_CODESET", 0 },
+#endif
+#ifdef HAVE_LANGINFO_YESEXPR
+	{ "HAVE_LANGINFO_YESEXPR", 1 },
+#else
+	{ "HAVE_LANGINFO_YESEXPR", 0 },
+#endif
+#ifdef HAVE_LIBIDN
+	{ "HAVE_LIBIDN", 1 },
+#else
+	{ "HAVE_LIBIDN", 0 },
+#endif
+#ifdef HAVE_META
+	{ "HAVE_META", 1 },
+#else
+	{ "HAVE_META", 0 },
+#endif
+#ifdef HAVE_REGCOMP
+	{ "HAVE_REGCOMP", 1 },
+#else
+	{ "HAVE_REGCOMP", 0 },
+#endif
+#ifdef HAVE_RESIZETERM
+	{ "HAVE_RESIZETERM", 1 },
+#else
+	{ "HAVE_RESIZETERM", 0 },
+#endif
+#ifdef HAVE_START_COLOR
+	{ "HAVE_START_COLOR", 1 },
+#else
+	{ "HAVE_START_COLOR", 0 },
+#endif
+#ifdef HAVE_TYPEAHEAD
+	{ "HAVE_TYPEAHEAD", 1 },
+#else
+	{ "HAVE_TYPEAHEAD", 0 },
+#endif
+#ifdef HAVE_WC_FUNCS
+	{ "HAVE_WC_FUNCS", 1 },
+#else
+	{ "HAVE_WC_FUNCS", 0 },
+#endif
+#ifdef ICONV_NONTRANS
+	{ "ICONV_NONTRANS", 1 },
+#else
+	{ "ICONV_NONTRANS", 0 },
+#endif
+#ifdef USE_DOTLOCK
+	{ "USE_DOTLOCK", 1 },
+#else
+	{ "USE_DOTLOCK", 0 },
+#endif
+#ifdef USE_FCNTL
+	{ "USE_FCNTL", 1 },
+#else
+	{ "USE_FCNTL", 0 },
+#endif
+#ifdef USE_FLOCK
+	{ "USE_FLOCK", 1 },
+#else
+	{ "USE_FLOCK", 0 },
+#endif
+#ifdef USE_GNU_REGEX
+	{ "USE_GNU_REGEX", 1 },
+#else
+	{ "USE_GNU_REGEX", 0 },
+#endif
+#ifdef USE_GSS
+	{ "USE_GSS", 1 },
+#else
+	{ "USE_GSS", 0 },
+#endif
+#ifdef USE_HCACHE
+	{ "USE_HCACHE", 1 },
+#else
+	{ "USE_HCACHE", 0 },
+#endif
+#ifdef USE_IMAP
+	{ "USE_IMAP", 1 },
+#else
+	{ "USE_IMAP", 0 },
+#endif
+#ifdef USE_POP
+	{ "USE_POP", 1 },
+#else
+	{ "USE_POP", 0 },
+#endif
+#ifdef USE_SASL
+	{ "USE_SASL", 1 },
+#else
+	{ "USE_SASL", 0 },
+#endif
+#ifdef USE_SETGID
+	{ "USE_SETGID", 1 },
+#else
+	{ "USE_SETGID", 0 },
+#endif
+#ifdef USE_SMTP
+	{ "USE_SMTP", 1 },
+#else
+	{ "USE_SMTP", 0 },
+#endif
+#ifdef USE_SSL_GNUTLS
+	{ "USE_SSL_GNUTLS", 1 },
+#else
+	{ "USE_SSL_GNUTLS", 0 },
+#endif
+#ifdef USE_SSL_OPENSSL
+	{ "USE_SSL_OPENSSL", 1 },
+#else
+	{ "USE_SSL_OPENSSL", 0 },
+#endif
+	{ NULL, 0 }
+};
+
+/**
+ * print_compile_options - Print a list of enabled/disabled features
+ *
+ * The configure script lets uses enable/disable features.
+ * This shows the Mutt user which features are/aren't available.
+ *
+ * The output is of the form: "+ENABLED_FEATURE -DISABLED_FEATURE" and is
+ * wrapped to SCREEN_WIDTH characters.
+ */
+static void
+print_compile_options (void)
+{
+	int i;
+	char c;
+	int len;
+	int used = 0;
+
+	for (i = 0; comp_opts[i].name; i++) {
+		len = strlen (comp_opts[i].name) + 2;	/* +/- and a space */
+		if ((used + len) > SCREEN_WIDTH) {
+			used = 0;
+			puts ("");
+		}
+		used += len;
+		c = comp_opts[i].enabled ? '+' : '-';
+		printf ("%c%s ", c, comp_opts[i].name);
+	}
+	puts ("");
+}
+
+/**
+ * rstrip_in_place - Strip a trailing carriage return
+ * @s:  String to be modified
+ *
+ * The string has its last carriage return set to NUL.
+ * Returns:
+ *	The modified string
+ */
+static char *
+rstrip_in_place (char *s)
+{
+	if (!s)
+		return NULL;
+
+	char *p;
+
+	p = &s[strlen (s)];
+	if (p == s)
+		return s;
+	p--;
+	while ((p >= s) && ((*p == '\n') || (*p == '\r')))
+		*p-- = '\0';
+	return s;
+}
+
+/**
+ * print_version - Print system and compile info
+ *
+ * Print information about the current system Mutt is running on.
+ * Also print a list of all the compile-time information.
+ */
+void
+print_version (void)
+{
+	struct utsname uts;
+
+	puts (mutt_make_version());
+	puts (_(Notice));
+
+	uname (&uts);
+
+#ifdef _AIX
+	printf ("System: %s %s.%s", uts.sysname, uts.version, uts.release);
+#elif defined (SCO)
+	printf ("System: SCO %s", uts.release);
+#else
+	printf ("System: %s %s", uts.sysname, uts.release);
+#endif
+
+	printf (" (%s)", uts.machine);
+
+#ifdef NCURSES_VERSION
+	printf ("\nncurses: %s (compiled with %s)", curses_version(), NCURSES_VERSION);
+#elif defined (USE_SLANG_CURSES)
+	printf ("\nslang: %d", SLANG_VERSION);
+#endif
+
+#ifdef _LIBICONV_VERSION
+	printf ("\nlibiconv: %d.%d", _LIBICONV_VERSION >> 8,
+		_LIBICONV_VERSION & 0xff);
+#endif
+
+#ifdef HAVE_LIBIDN
+	printf ("\nlibidn: %s (compiled with %s)", stringprep_check_version (NULL),
+		STRINGPREP_VERSION);
+#endif
+
+#ifdef USE_HCACHE
+	printf ("\nhcache backend: %s", mutt_hcache_backend());
+#endif
+
+	puts ("\n\nCompiler:");
+	rstrip_in_place ((char *) cc_version);
+	puts (cc_version);
+
+	rstrip_in_place ((char *) configure_options);
+	printf ("\nConfigure options: %s\n", configure_options);
+
+	rstrip_in_place ((char *) cc_cflags);
+	printf ("\nCompilation CFLAGS: %s\n", cc_cflags);
+
+	puts (_("\nCompile options:"));
+	print_compile_options();
+
+#ifdef DOMAIN
+	printf ("DOMAIN=\"%s\"\n", DOMAIN);
+#else
+	puts ("-DOMAIN");
+#endif
+
+#ifdef MIXMASTER
+	printf ("MIXMASTER=\"%s\"\n", MIXMASTER);
+#else
+	puts ("-MIXMASTER");
+#endif
+
+#ifdef ISPELL
+	printf ("ISPELL=\"%s\"\n", ISPELL);
+#else
+	puts ("-ISPELL");
+#endif
+
+	printf ("SENDMAIL=\"%s\"\n", SENDMAIL);
+	printf ("MAILPATH=\"%s\"\n", MAILPATH);
+	printf ("PKGDATADIR=\"%s\"\n", PKGDATADIR);
+	printf ("SYSCONFDIR=\"%s\"\n", SYSCONFDIR);
+	printf ("EXECSHELL=\"%s\"\n", EXECSHELL);
+
+	puts (_(ReachingUs));
+
+	mutt_print_patchlist();
+}
+
+/**
+ * print_copyright - Print copyright message
+ *
+ * Print the authors' copyright messages, the GPL license and some contact
+ * information for the Mutt project.
+ */
+void
+print_copyright (void)
+{
+      puts (mutt_make_version());
+      puts (_(Copyright));
+      puts (_(License));
+      puts (_(Obtaining));
+      puts (_(ReachingUs));
+}
+
+/**
+ * feature_enabled - Test is a compile-time feature is enabled
+ * @name:  Compile-time symbol of the feature
+ *
+ * Many of the larger features of mutt can be disabled at compile time.
+ * They define a symbol and use #ifdef's around their code.
+ * The symbols are mirrored in "struct compile_options comp_opts[]" in this
+ * file.
+ *
+ * This function checks if one of these symbols is present in the code.
+ *
+ * These symbols are also seen in the output of "mutt -v".
+ *
+ * Returns:
+ *	1: Feature enables
+ *	0: Feature not enabled, or not compiled in
+ */
+int
+feature_enabled (const char *name)
+{
+	if (!name)
+		return 0;
+
+	int i;
+	for (i = 0; comp_opts[i].name; i++) {
+		if (mutt_strcmp (name, comp_opts[i].name) == 0) {
+			return 1;
+		}
+	}
+	return 0;
+}
+
diff --git a/version.h b/version.h
new file mode 100644
index 0000000..b46ebf8
--- /dev/null
+++ b/version.h
@@ -0,0 +1,26 @@
+/**
+ * Copyright (C) 2016 Richard Russon
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#ifndef _VERSION_H_
+#define _VERSION_H_
+
+void print_version (void);
+void print_copyright (void);
+int feature_enabled (const char *name);
+
+#endif /* _VERSION_H_ */
-- 
2.8.2

