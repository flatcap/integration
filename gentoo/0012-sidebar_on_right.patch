From e28992bedb2a42b30f8e533d67a095724d7e88b4 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Thu, 21 Apr 2016 02:32:18 +0100
Subject: [PATCH 12/12] sidebar_on_right

---
 curs_lib.c |  8 ++++++--
 init.h     |  5 +++++
 mutt.h     |  1 +
 sidebar.c  | 33 +++++++++++++++++++++++++--------
 4 files changed, 37 insertions(+), 10 deletions(-)

diff --git a/curs_lib.c b/curs_lib.c
index 5bc4bd2..9a3f5e5 100644
--- a/curs_lib.c
+++ b/curs_lib.c
@@ -594,9 +594,13 @@ void mutt_reflow_windows (void)
   {
     memcpy (MuttSidebarWindow, MuttIndexWindow, sizeof (mutt_window_t));
     MuttSidebarWindow->cols = SidebarWidth;
-
     MuttIndexWindow->cols -= SidebarWidth;
-    MuttIndexWindow->col_offset += SidebarWidth;
+
+    if (option (OPTSIDEBARONRIGHT)) {
+      MuttSidebarWindow->col_offset = COLS - SidebarWidth;
+    } else {
+      MuttIndexWindow->col_offset += SidebarWidth;
+    }
   }
 #endif
 }
diff --git a/init.h b/init.h
index 795840f..b3c3834 100644
--- a/init.h
+++ b/init.h
@@ -3109,6 +3109,11 @@ struct option_t MuttVars[] = {
   ** \fC<sidebar-prev-new>\fP command is similarly affected, wrapping around to
   ** the end of the list.
   */
+  { "sidebar_on_right", DT_BOOL, R_BOTH|R_REFLOW, UL OPTSIDEBARONRIGHT, 0 },
+  /*
+  ** .pp
+  ** When set, the sidebar will appear on the right-hand side of the screen.
+  */
   { "sidebar_refresh_time", DT_NUM, R_BOTH, UL &SidebarRefreshTime, 60 },
   /*
   ** .pp
diff --git a/mutt.h b/mutt.h
index 50f4f3e..2ab2741 100644
--- a/mutt.h
+++ b/mutt.h
@@ -494,6 +494,7 @@ enum
   OPTSIDEBARNEWMAILONLY,
   OPTSIDEBARNEXTNEWWRAP,
   OPTSIDEBARSHORTPATH,
+  OPTSIDEBARONRIGHT,
 #endif
   OPTSIGDASHES,
   OPTSIGONTOP,
diff --git a/sidebar.c b/sidebar.c
index 0c57ef3..3134dd5 100644
--- a/sidebar.c
+++ b/sidebar.c
@@ -495,10 +495,17 @@ static int draw_divider (int num_rows, int num_cols)
 
   SETCOLOR(MT_COLOR_DIVIDER);
 
+  int col;
+  if (option (OPTSIDEBARONRIGHT)) {
+    col = 0;
+  } else {
+    col = SidebarWidth - delim_len;
+  }
+
   int i;
   for (i = 0; i < num_rows; i++)
   {
-    mutt_window_move (MuttSidebarWindow, i, SidebarWidth - delim_len);	//RAR 0 for rhs
+    mutt_window_move (MuttSidebarWindow, i, col);
     addstr (NONULL(SidebarDividerChar));
   }
 
@@ -509,21 +516,26 @@ static int draw_divider (int num_rows, int num_cols)
  * fill_empty_space - Wipe the remaining Sidebar space
  * @first_row:  Window line to start (0-based)
  * @num_rows:   Number of rows to fill
- * @width:      Width of the Sidebar (minus the divider)
+ * @div_width:  Width in screen characters taken by the divider
+ * @num_cols:   Number of columns to fill
  *
  * Write spaces over the area the sidebar isn't using.
  */
-static void fill_empty_space (int first_row, int num_rows, int width)
+static void fill_empty_space (int first_row, int num_rows, int div_width, int num_cols)
 {
   /* Fill the remaining rows with blank space */
   SETCOLOR(MT_COLOR_NORMAL);
 
+  if (!option (OPTSIDEBARONRIGHT))
+    div_width = 0;
+
   int r;
   for (r = 0; r < num_rows; r++)
   {
-    mutt_window_move (MuttSidebarWindow, first_row + r, 0);	//RAR rhs
+    mutt_window_move (MuttSidebarWindow, first_row + r, div_width);
+
     int i;
-    for (i = 0; i < width; i++)
+    for (i = 0; i < num_cols; i++)
       addch (' ');
   }
 }
@@ -585,7 +597,12 @@ static void draw_sidebar (int num_rows, int num_cols, int div_width)
     else
       SETCOLOR(MT_COLOR_NORMAL);
 
-    mutt_window_move (MuttSidebarWindow, row, 0);
+    int col = 0;
+    if (option (OPTSIDEBARONRIGHT)) {
+      col = div_width;
+    }
+
+    mutt_window_move (MuttSidebarWindow, row, col);
     if (Context && Context->realpath &&
         !mutt_strcmp (b->realpath, Context->realpath))
     {
@@ -666,7 +683,7 @@ static void draw_sidebar (int num_rows, int num_cols, int div_width)
     row++;
   }
 
-  fill_empty_space (row, num_rows - row, w);
+  fill_empty_space (row, num_rows - row, div_width, w);
 }
 
 
@@ -705,7 +722,7 @@ void mutt_sb_draw (void)
 
   if (!get_incoming())
   {
-    fill_empty_space (0, num_rows, SidebarWidth - div_width);
+    fill_empty_space (0, num_rows, div_width, num_cols - div_width);
     return;
   }
 
-- 
2.9.0

