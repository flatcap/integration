From 5b84ed097a2950e04660f7d8b5eb8a491abb8c9e Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 27 May 2016 15:24:12 +0100
Subject: [PATCH 20/21] threadcomplete

---
 mutt.h    |  1 +
 pattern.c | 11 +++++++++++
 2 files changed, 12 insertions(+)

diff --git a/mutt.h b/mutt.h
index 86a2b27..213c003 100644
--- a/mutt.h
+++ b/mutt.h
@@ -195,6 +195,7 @@ enum
   M_LIMIT,
   M_EXPIRED,
   M_SUPERSEDED,
+  M_THREADCOMPLETE,
 
   /* actions for mutt_pattern_comp/mutt_pattern_exec */
   M_AND,
diff --git a/pattern.c b/pattern.c
index 470f1a3..e70b503 100644
--- a/pattern.c
+++ b/pattern.c
@@ -57,6 +57,7 @@ static const struct pattern_flags
 }
 Flags[] =
 {
+  { 'a', M_THREADCOMPLETE,	0,		NULL },
   { 'A', M_ALL,			0,		NULL },
   { 'b', M_BODY,		M_FULL_MSG,	eat_regexp },
   { 'B', M_WHOLE_MSG,		M_FULL_MSG,	eat_regexp },
@@ -1249,6 +1250,16 @@ pattern_exec (struct pattern_t *pat, pattern_exec_flag flags, CONTEXT *ctx, HEAD
                                              2, h->env->to, h->env->cc));
     case M_LIST:	/* known list, subscribed or not */
       return (pat->not ^ mutt_is_list_cc (pat->alladdr, h->env->to, h->env->cc));
+    case M_THREADCOMPLETE:
+      { static pattern_t tmp;
+        static short pattern_set = 0;
+        if(! pattern_set) {
+          memset (&tmp, 0, sizeof (tmp));
+          tmp.op = M_TAG;
+          pattern_set = 1;
+        }
+        return (pat->not ^ (h->env && match_threadcomplete(&tmp, flags, ctx, h->thread, 1, 1, 1, 1)));
+      } 
     case M_SUBSCRIBED_LIST:
       return (pat->not ^ mutt_is_list_recipient (pat->alladdr, h->env->to, h->env->cc));
     case M_PERSONAL_RECIP:
-- 
2.7.4

