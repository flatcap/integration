From 669b54ca9acc5e81de370cffd80cb320a0d033c7 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 27 May 2016 15:17:48 +0100
Subject: [PATCH 05/21] reverse_reply

---
 PATCHES   |  1 +
 init.h    |  7 +++++++
 mutt.h    |  1 +
 protos.h  |  1 +
 send.c    |  4 ++++
 sendlib.c | 29 +++++++++++++++++++++++++++++
 6 files changed, 43 insertions(+)

diff --git a/PATCHES b/PATCHES
index 441a58b..f3b1426 100644
--- a/PATCHES
+++ b/PATCHES
@@ -1,3 +1,4 @@
+patch-1.5.6.cb.reverse_reply.2
 vvv.quote
 patch-ifdef-neo-UNKNOWN
 patch-initials-neo-UNKNOWN
diff --git a/init.h b/init.h
index ff01b0d..4333e82 100644
--- a/init.h
+++ b/init.h
@@ -2546,6 +2546,13 @@ struct option_t MuttVars[] = {
   ** possibly including eventual real names.  When it is \fIunset\fP, mutt will
   ** override any such real names with the setting of the $$realname variable.
   */
+  { "reverse_reply",	DT_BOOL, R_NONE, OPTREVREPLY, 0 },
+  /*
+  ** .pp
+  ** When set, this variable uses the name from your aliases in the To and Cc
+  ** headers of reply mails you send, like $reverse_alias does in the index.
+  ** When unset, the headers taken from the original mail are left unchanged.
+  */
   { "rfc2047_parameters", DT_BOOL, R_NONE, OPTRFC2047PARAMS, 0 },
   /*
   ** .pp
diff --git a/mutt.h b/mutt.h
index 164069a..6f0ea0e 100644
--- a/mutt.h
+++ b/mutt.h
@@ -432,6 +432,7 @@ enum
   OPTREVALIAS,
   OPTREVNAME,
   OPTREVREAL,
+  OPTREVREPLY,
   OPTRFC2047PARAMS,
   OPTSAVEADDRESS,
   OPTSAVEEMPTY,
diff --git a/protos.h b/protos.h
index 8e5f7aa..f5c29ce 100644
--- a/protos.h
+++ b/protos.h
@@ -93,6 +93,7 @@ ADDRESS *mutt_get_address (ENVELOPE *, char **);
 ADDRESS *mutt_lookup_alias (const char *s);
 ADDRESS *mutt_remove_duplicates (ADDRESS *);
 ADDRESS *mutt_remove_xrefs (ADDRESS *, ADDRESS *);
+ADDRESS *mutt_reverse_address (ADDRESS *);
 ADDRESS *mutt_expand_aliases (ADDRESS *);
 ADDRESS *mutt_parse_adrlist (ADDRESS *, const char *);
 
diff --git a/send.c b/send.c
index 387de5d..47cd6db 100644
--- a/send.c
+++ b/send.c
@@ -601,6 +601,10 @@ void mutt_fix_reply_recipients (ENVELOPE *env)
   /* the CC field can get cluttered, especially with lists */
   env->to = mutt_remove_duplicates (env->to);
   env->cc = mutt_remove_duplicates (env->cc);
+  if (option (OPTREVREPLY)){
+	env->to = mutt_reverse_address (env->to);
+	env->cc = mutt_reverse_address (env->cc);
+  }
   env->cc = mutt_remove_xrefs (env->to, env->cc);
   
   if (env->cc && !env->to)
diff --git a/sendlib.c b/sendlib.c
index e6b6a79..c25c0da 100644
--- a/sendlib.c
+++ b/sendlib.c
@@ -2687,6 +2687,35 @@ static void set_noconv_flags (BODY *b, short flag)
   }
 }
 
+/* given a list of addresses, return a list of reverse_alias'ed addresses */
+ADDRESS *mutt_reverse_address (ADDRESS *addr)
+{
+  ADDRESS *top,*tmp,*alias;
+
+  if (addr == NULL)
+    return NULL;
+
+  if ((alias = alias_reverse_lookup (addr)) && alias->personal) {
+    tmp = rfc822_cpy_adr_real(alias);
+    tmp->next = addr->next;
+    addr->next = NULL;
+    rfc822_free_address(&addr);
+    addr = tmp;
+  }
+
+  for (top = addr; top->next != NULL; top = tmp) {
+    tmp = top->next;
+    if ((alias = alias_reverse_lookup (tmp)) && alias->personal) {
+      top->next = rfc822_cpy_adr_real(alias);
+      top->next->next = tmp->next;
+      tmp->next = NULL;
+      rfc822_free_address(&tmp);
+      tmp = top->next;
+    }
+  }
+  return addr;
+}
+
 int mutt_write_fcc (const char *path, HEADER *hdr, const char *msgid, int post, char *fcc)
 {
   CONTEXT f;
-- 
2.8.2

